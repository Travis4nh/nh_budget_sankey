#!/usr/bin/env ruby

# usage:
#    ./sankey.rb > sankey_data.txt
#

require 'csv'
require 'yaml'

$flows = Hash.new{ |hash, key| hash[key] = Hash.new(0) }
$spending_classes = Set.new
$departments_scaled = Hash.new


# populates $flows
def populate_flow_data

  # read config
  #
  configfile = "./.rakefile.yaml"
  if FileTest.exists?(configfile)
    config  = YAML.load_file(configfile)
    csv_file_path = config[:input_file]

  else
    raise "no config file"
  end


  def add_flow(source, dest, amt)
    $flows[source][dest] += amt
  end

  def csv_to_flow(csv_file_path, config)
    # read the header row to populate `headers[]`
    # 
    rows = CSV.read(csv_file_path)
    headers = []
    rows.each_with_index do |row, ii|
      if ii == config[:header_row]
        headers = row
        break
      end
    end

    data_row_num        = config[:data_row ]

    head_level_1        = config[:head_level_1]
    head_level_2        = config[:head_level_2]
    head_level_3        = config[:head_level_3]
    head_level_4        = config[:head_level_4]
    head_level_5        = config[:head_level_5]
    head_level_6        = config[:head_level_6]
    
    head_expense_or_fund = config[:head_expense_or_fund]
    head_dollar         = config[:head_dollars]
    
    ii = 0
    CSV.foreach( csv_file_path , headers: headers) do |row|


      
      ii += 1
      next unless ii >= data_row_num

      level_1 = row[head_level_1]
      level_2 = row[head_level_2]
      level_3 = row[head_level_3]
      level_4 = row[head_level_4]
      level_5 = row[head_level_5]
      level_6 = row[head_level_6]
      
      amt = row[head_dollar].to_i

      # puts "--------------------"
      # puts "fund = #{fund}"
      # puts "cat = #{cat}"
      # puts "dept = #{dept}"
      # puts "agency = #{agency}"
      # puts "activity = #{activity}"
      # puts "spending_class = #{spending_class}"
      # puts "amt = #{amt}"

      
      if ["Expense", "Position"].include?(row[head_expense_or_fund]) 
        # $spending_classes.add(spending_class)
        

        add_flow(level_1, level_2, amt)
        add_flow(level_2, level_3, amt)
        add_flow(level_3, level_4, amt)
        add_flow(level_4, level_5, amt)
        add_flow(level_5, level_6, amt)

      elsif row['Record Type'] == "Funding"
      # puts " funding"
      elsif row['Record Type'] == "Position"
      # puts " position"
      else
        # ignoring col
      end
    end
  end

  csv_to_flow(csv_file_path, config)


  
end


def output_flow_data
  $flows.each_pair do |src, details|
    details.each_pair do |dest, amt|
      puts " #{src} [#{amt}] #{dest} "
    end
  end
end

# def find_personnel_placeholders
#   $flows.each_pair do |src, details|
#     details.each_pair do |dest, amt|
#       if $spending_classes.include?(dest)
#         if amt < 1000 && amt > 0 && ["059-Temp Full Time","FTE1-Permanent Classified","FTE2-Unclassified Positions"].include?(dest)
#          puts "#{src} / #{dest} = #{amt}"
#         end
#       end
#     end
#   end
# end

def scale_depts
  # puts "$spending_classes = #{$spending_classes.inspect}"
  
  departments = Hash.new{ |hash, key| hash[key] = Hash.new(0) }
  
  $flows.each_pair do |src, details|
    details.each_pair do |dest, amt|
      # is the flow is from an acct_class to a class (lead node)
      if $spending_classes.include?(dest)
        # dest_sym = dest.downcase.gsub(/[ -]/, '_').to_sym
        departments[src][dest] = amt
      end
    end
  end

  # puts "departments = #{departments.inspect}"

  $departments_scaled = Hash.new

  departments.each_pair do |dept, hh|

    total = hh.to_a.inject(0) { |sum, pair| sum + pair[1] }
    next if total == 0
    scaled_h = hh.to_a.map { |expense_name, spending_dollars| [expense_name, spending_dollars * 1.0 / total ] }.to_h

    # puts "-------------------- #{dept}"
    # puts "raw = #{hh.inspect}"
    # puts "sum percent = #{ scaled_h.map { |k,v| v }.sum }"
    # scaled_h[:total] = total
    # puts "scaled = #{scaled_h.inspect}"

    $departments_scaled[dept] = scaled_h
    
  end
end

# Look at data from the spending-class perspective (e.g. IT, overtime, out-of-state travel, etc.)
# For each spending category, report on which departments
#
def calculate_class_percents

  $spending_classes.to_a.sort.each do |sp_class|

    
    #puts departments_scaled.map { |k, hh| [ k, hh[sp_class] ] }.inspect
    arr = departments_scaled.map { |k, hh| [ k, hh[sp_class] || 0.0 ] }.sort_by { | pair | pair[1] }.reverse
    avg = arr.map { |pair| pair[1] }.sum / arr.length

    variance_array = arr.map{|pair| (pair[1] - avg) }
    std_dev = variance_array.size == 0 ? 0 :   Math.sqrt(variance_array.sum { |v| v ** 2} / variance_array.size)

    
    puts "---- #{sp_class} avg = #{sprintf("%3.2f", avg * 100)}%, std_dev = #{sprintf("%2.2f", std_dev * 100)} percentage pts "

    if arr.reject { |k, v| v == 0.0 }.length < 3
      puts "skipped bc too few"
      next
    end
    
    # puts "arr = #{arr.inspect}"


    arr[0,10].each do |pair|
      devs = (pair[1] - avg) / std_dev
      puts "  * #{sprintf("%5.2f", pair[1] * 100) }% + #{ sprintf("%2.0f", devs) } std devs    #{pair[0] }"
    end
  end
  
end

def print_dept_percents

  $departments_scaled.each_pair do |dept, hh|
    puts "---- #{dept}"
    hh.to_a.sort_by { |pair| pair[1]}.reverse[0,10].each do |pair|
      puts "  * #{sprintf("%5.1f", pair[1] * 100)}% #{pair[0]}"
    end
    puts "\n"
  end  

  $departments_scaled.each_pair do |dept, hh|
    filename_base = "/tmp/" + dept.gsub(/[ &:']/, "-").gsub(/-+/, "-").downcase

    filename_pie = filename_base + ".pie"
    file = File.open(filename_pie, "w")
    hh.to_a.sort_by { |pair| pair[1]}.reverse[0,10].each do |pair|
      file.write("#{sprintf("%5.1f", pair[1] * 100)},#{pair[0].gsub(/&/, "and")}\n")
    end
    file.close

    filename_svg = filename_base + ".svg"
    filename_annotated = filename_base + ".png"
    
    pie_cmd = "piechart  --percent  --order value,legend --color contrast #{filename_pie} > #{filename_svg}"
    # puts "pie_cmd = #{pie_cmd}"
    `#{pie_cmd}`
    convert_cmd = "convert #{filename_svg} -gravity north -extent 900x700 -pointsize 50 -fill black  -annotate +0+600 \"#{dept.downcase}\"  #{filename_annotated}"
    `#{convert_cmd}`
    puts "create pie chart #{filename_annotated}"

  end  

  
end



## top-level functions

task :init do
  yaml_file = ".rakefile.yaml"
  if FileTest.exists?(yaml_file)
    puts "*** #{yaml_file} already exists; just edit it"
  end
  File.open(yaml_file, "w") do |file|
    file.write(<<-STRING
---
:input_file: ./data/2026_2027_AgencyBudget.csv
:header_row: 6
:data_row: 7
:head_level_1: 'Fund'
:head_level_2: 'Category of Government'
:head_level_3: 'Department'
:head_level_4: 'Agency'
:head_level_5: 'Activity'
:head_level_6: 'Class'
:head_expense_or_fund : 'Record Type'
:head_dollars : 'FY26 Total Request'
STRING
              )
  end
  puts "created file ./#{yaml_file}"
end


task :sankey do
  populate_flow_data
  output_flow_data
  
  file = File.open("./sankey_display_settings.txt", "r")
  contents = file.read
  puts contents
end

task :default => :sankey

task :analyze do
  populate_flow_data
  calculate_class_percents
end

task :headcount do
  find_personnel_placeholders
end

task :department do
  populate_flow_data
  scale_depts
  print_dept_percents
end
